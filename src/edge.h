#ifndef EDGE_H
#define EDGE_H

class triangle;
#include "vect.h"
#include "triangle.h"
#include <vector>

class edge {
private:
	vect* head; //head point
	vect* tail; //tail point
	std::vector<triangle*> triang; //number of triangles connected to this edge
	int odd; //used to specify which new odd point was created for this edge
public:
	edge(); //constructor
	bool isSame(vect head, vect tail); //check to see if another edge is the same as this one
	void loopHelp(float* ret); //used for loop subdivision, calculates values for odd points
	void populatePoint(vect* point); //add a point to this edge
	void populateTriangle(triangle* t); //add a triangle to this edge
	void setOdd(int odd); //save the location in the vector of points of the odd point generated by this edge
	int getOdd();
	vect* getHead();
	vect* getTail();
	bool isPart(vect point); //checks to see if a point is the head or tail of this edge
	vect getVecRep(); //returns the edge as a vector (tail - head)
};
#endif